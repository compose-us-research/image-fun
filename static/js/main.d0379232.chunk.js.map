{"version":3,"sources":["component/App/App.module.css","component/Solver/Solver.module.css","component/FullscreenGrid/FullscreenGrid.module.css","component/Dialog/Dialog.module.css","lib/generate-list/generate-list.ts","lib/get-unsplash-image/get-unsplash-image.ts","hook/use-window-size.ts","component/Image/Image.tsx","component/FullscreenGrid/FullscreenGrid.tsx","component/Solver/Solver.tsx","service/pairs.ts","lib/pair-generator/pair-generator.ts","component/Dialog/Dialog.tsx","component/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","generateList","words","num","maxAmountPerWord","Math","floor","length","freeSpace","Array","fill","map","i","idx","keywords","word","selectedIndex","random","filter","index","forEach","remainingIndex","getUnsplashImage","height","keyword","width","url","uuid","v4","useWindowSize","useState","setHeight","setWidth","resizeCheck","window","innerHeight","innerWidth","useLayoutEffect","addEventListener","removeEventListener","Image","src","alt","FullscreenGrid","onClick","solving","sizeX","ceil","sizeY","images","useMemo","className","style","root","general","boxSizing","display","gridTemplateColumns","gridTemplateRows","overflow","position","image","key","x","y","Solver","hide","solve","solved","first","second","wrong","solutionElement","useRef","verifySolution","split","current","value","focusSolutionElement","focus","onSubmit","event","preventDefault","form","input","ref","type","listOfPairs","pairGenerator","Dialog","close","message","party","title","content","App","showSolve","setShowSolve","showDialogWindow","setShowDialogWindow","setSolved","pair","setPair","showSolver","useCallback","hideSolver","showDialog","hideDialog","app","restart","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,OAAS,oBAAoB,IAAM,iBAAiB,QAAU,qBAAqB,cAAc,yBAAyB,eAAe,0BAA0B,KAAO,kBAAkB,QAAU,qBAAqB,QAAU,uB,gBCAvPD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,KAAO,qBAAqB,MAAQ,wB,gBCAlFD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,kC,gBCA1GD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,QAAU,wBAAwB,MAAQ,wB,qJCkBzEC,EAnBM,SAACC,EAAiBC,GACrC,IAAMC,EAAmBC,KAAKC,MAAMH,EAAMD,EAAMK,QAC5CC,EAAY,IAAIC,MAAMN,GAAKO,KAAK,GAAGC,IAAI,SAACC,EAAGC,GAAJ,OAAYD,EAAIC,IACvDC,EAAW,IAAIL,MAAMN,GAH4B,uBAIrD,YAAiBD,EAAjB,+CACE,IADuB,IAAhBa,EAAe,mBACbH,GACP,IAAMI,EACJR,EAAUH,KAAKC,MAAMD,KAAKY,SAAWT,EAAUD,SACjDO,EAASE,GAAiBD,EAC1BP,EAAYA,EAAUU,OAAO,SAAAC,GAAK,OAAIA,IAAUH,KAJzCJ,EAAI,EAAGA,EAAIR,EAAkBQ,IAAM,IALO,kFAgBrD,OAHAJ,EAAUY,QAAQ,SAACC,EAAgBF,GACjCL,EAASO,GAAkBnB,EAAMiB,KAE5BL,G,iBCLMQ,EATU,SAAC,GAAoF,IAAlFC,EAAiF,EAAjFA,OAAQC,EAAyE,EAAzEA,QAASC,EAAgE,EAAhEA,MAC3C,MAAO,CACLF,SACAC,UACAE,IAAI,sCAAD,OAAwCD,EAAxC,YAAiDF,EAAjD,YAA2DC,EAA3D,YAAsEG,IAAKC,MAC9EH,UCeWI,EApBO,WAAO,IAAD,EACEC,mBAAS,GADX,mBACnBP,EADmB,KACXQ,EADW,OAEAD,mBAAS,GAFT,mBAEnBL,EAFmB,KAEZO,EAFY,KAIpBC,EAAc,WAClBF,EAAUG,OAAOC,aACjBH,EAASE,OAAOE,aAWlB,OARAC,0BAAgB,WAGd,OAFAH,OAAOI,iBAAiB,SAAUL,GAClCA,IACO,WACLC,OAAOK,oBAAoB,SAAUN,KAEtC,IAEI,CAACV,EAAQE,ICLHe,EAJqB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,IAAKhB,EAAoB,EAApBA,MAAOF,EAAa,EAAbA,OACjD,OAAO,yBAAKkB,IAAKA,EAAKhB,MAAOA,EAAOF,OAAQA,EAAQmB,IAAI,U,gBCoD3CC,EAjDuC,SAAC,GAIhD,IAHLC,EAGI,EAHJA,QAGI,IAFJC,eAEI,SADJ3C,EACI,EADJA,MACI,EACoB2B,IADpB,mBACGN,EADH,KACWE,EADX,KAEEqB,EAAQzC,KAAK0C,KAAKtB,EAAQ,GAC1BuB,EAAQ3C,KAAK0C,KAAKxB,EAAS,GAE3B0B,EAASC,kBAAQ,WAErB,OADoBjD,EAAaC,EAAO,IACrBS,IAAI,SAAAa,GAAO,OAC5BF,EAAiB,CACfC,OAAQyB,EACRxB,QAASA,EACTC,MAAOqB,OAGV,CAACA,EAAOE,EAAO9C,IAElB,OACE,yBACEiD,UAAS,UAAKC,IAAMC,KAAX,YAAmBR,EAAUO,IAAMP,QAAUO,IAAME,SAC5DV,QAASA,EACTQ,MAAO,CACLG,UAAW,aACXC,QAAS,OACTC,oBAAqB,iBACrBC,iBAAkB,iBAClBC,SAAU,SACVC,SAAU,WACVnC,MAAO,OACPF,OAAQ,SAGT0B,EAAOtC,IAAI,SAACkD,EAAO1C,GAAR,OACV,kBAAC,EAAD,CACE2C,IAAKD,EAAMnC,IACXqC,EAAG5C,EAAQ,EACX6C,EAAG3D,KAAKC,MAAMa,EAAQ,GACtBsB,IAAKoB,EAAMnC,IACXD,MAAOoC,EAAMpC,MACbF,OAAQsC,EAAMtC,a,gBCGT0C,EA/CuB,SAAC,GAMhC,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,MAII,IAHJC,cAGI,yBAFJlE,MAEI,GAFImE,EAEJ,KAFWC,EAEX,KADJC,EACI,EADJA,MAEMC,EAAkBC,iBAAyB,MAK3CC,EAAiB,WACrB,IAAMC,EACJH,EAAgBI,SAAWJ,EAAgBI,QAAQC,MAAMF,MAAM,OACjDA,GAASA,EAAM,KAAON,GAASM,EAAM,KAAOL,EAE1DH,IAEAI,KAGEO,EAAuB,WACvBN,EAAgBI,SAClBJ,EAAgBI,QAAQG,SAI5B,OADA1C,0BAAgByC,GAEd,yBAAK3B,UAAWC,IAAMC,KAAMT,QAASkC,GACnC,0BAAME,SAtBO,SAACC,GAChBA,EAAMC,iBACNR,MAqBI,yBAAKvB,UAAWC,IAAM+B,MACpB,mDACA,uFACA,yBAAKhC,UAAS,UAAKC,IAAMgC,MAAX,YAAoBhB,EAAShB,IAAMgB,OAAS,KACxD,2BAAOiB,IAAKb,EAAiBc,KAAK,SAClC,4BAAQA,KAAK,UAAUlB,EAAS,UAAY,WAE9C,4BAAQkB,KAAK,SAAS1C,QAAS,kBAAMsB,MAArC,8BC3BKqB,EAvByB,CACtC,CAAC,WAAY,QACb,CAAC,SAAU,QACX,CAAC,OAAQ,QACT,CAAC,SAAU,QACX,CAAC,QAAS,OACV,CAAC,aAAc,UACf,CAAC,QAAS,SACV,CAAC,OAAQ,OACT,CAAC,OAAQ,QACT,CAAC,QAAS,OACV,CAAC,SAAU,UACX,CAAC,WAAY,QACb,CAAC,QAAS,SACV,CAAC,WAAY,QACb,CAAC,QAAS,QACV,CAAC,OAAQ,UACT,CAAC,UAAW,SACZ,CAAC,SAAU,SACX,CAAC,KAAM,WACP,CAAC,QAAS,WClBG,SAASC,IACtB,OAAOD,EAAYlF,KAAKC,MAAMD,KAAKY,SAAWsE,EAAYhF,S,oCCsB7CkF,EAduB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC9D,OACE,yBACE1C,UAAS,UAAKC,IAAMC,KAAX,YAAmBuC,EAAQxC,IAAMwC,MAAQ,IAClDhD,QAAS8C,GAET,yBAAKvC,UAAWC,IAAM0C,SACpB,4BAAKD,GACL,6BAAMF,MC+CCI,EA1DO,WAAO,IAAD,EACQjE,oBAAS,GADjB,mBACnBkE,EADmB,KACRC,EADQ,OAEsBnE,oBAAS,GAF/B,mBAEnBoE,EAFmB,KAEDC,EAFC,OAGErE,oBAAS,GAHX,mBAGnBsC,EAHmB,KAGXgC,EAHW,OAIFtE,mBAAS,kBAAM0D,MAJb,mBAInBa,EAJmB,KAIbC,EAJa,KAKpBC,EAAaC,sBAAY,kBAAMP,GAAa,IAAO,IACnDQ,EAAaD,sBAAY,kBAAMP,GAAa,IAAQ,IACpDS,EAAaF,sBAAY,WAC7BL,GAAoB,IACnB,IACGQ,EAAaH,sBAAY,WAC7BL,GAAoB,IACnB,IAQH,OACE,yBACEhD,UAAS,UAAKC,IAAMwD,IAAX,YAAkBZ,EAAY5C,IAAMP,QAAUO,IAAME,QAApD,YACPc,EAAShB,IAAMgB,OAAS,KAG1B,kBAAC,EAAD,CAAgBxB,QAAS2D,EAAY1D,QAASmD,EAAW9F,MAAOmG,IAC/DL,GACC,kBAAC,EAAD,CACE9B,KAAMuC,EACNtC,MAAO,WACLuC,IACAN,GAAU,IAEZhC,OAAQA,EACRG,MAAOmC,EACPxG,MAAOmG,IAGX,4BAAQlD,UAAWC,IAAMyD,QAASvB,KAAK,SAAS1C,QA1BtC,WACZuD,GAAoB,GACpBF,GAAa,GACbG,GAAU,GACVE,EAAQd,OAsBN,WAGCU,GACC,kBAAC,EAAD,CACER,MAAOiB,EACPd,MAAOzB,EAAS,SAAW,UAC3BwB,MAAOxB,EACPuB,QACEvB,EACI,0BACA,2CC9CI0C,QACW,cAA7B5E,OAAO6E,SAASC,UAEe,UAA7B9E,OAAO6E,SAASC,UAEhB9E,OAAO6E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d0379232.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"solved\":\"App_solved__2w73k\",\"app\":\"App_app__2-W1N\",\"restart\":\"App_restart__2v_bE\",\"solver-form\":\"App_solver-form__J-p_t\",\"solver-input\":\"App_solver-input__2vBfI\",\"grid\":\"App_grid__3QM_p\",\"solving\":\"App_solving__1S4Q6\",\"general\":\"App_general__kLpCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Solver_root__A-7Gj\",\"form\":\"Solver_form__328cI\",\"input\":\"Solver_input__2KW_u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"FullscreenGrid_grid__h9d0k\",\"solving\":\"FullscreenGrid_solving__3XeJb\",\"general\":\"FullscreenGrid_general__33W1k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Dialog_root__2HtO8\",\"content\":\"Dialog_content__2w4hO\",\"party\":\"Dialog_party__QHre4\"};","const generateList = (words: string[], num: number) => {\n  const maxAmountPerWord = Math.floor(num / words.length);\n  let freeSpace = new Array(num).fill(1).map((i, idx) => i * idx);\n  let keywords = new Array(num);\n  for (let word of words) {\n    for (let i = 0; i < maxAmountPerWord; i++) {\n      const selectedIndex =\n        freeSpace[Math.floor(Math.random() * freeSpace.length)];\n      keywords[selectedIndex] = word;\n      freeSpace = freeSpace.filter(index => index !== selectedIndex);\n    }\n  }\n  // assert freeSpace.length < words.length\n  freeSpace.forEach((remainingIndex, index) => {\n    keywords[remainingIndex] = words[index];\n  });\n  return keywords;\n};\n\nexport default generateList;\n","import uuid from \"uuid\";\n\nconst getUnsplashImage = ({ height, keyword, width }: { height: number; keyword: string; width: number }) => {\n  return {\n    height,\n    keyword,\n    url: `https://source.unsplash.com/random/${width}x${height}?${keyword},${uuid.v4()}`,\n    width\n  };\n};\n\nexport default getUnsplashImage;\n","import { useState, useLayoutEffect } from \"react\";\n\nconst useWindowSize = () => {\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n\n  const resizeCheck = () => {\n    setHeight(window.innerHeight);\n    setWidth(window.innerWidth);\n  };\n\n  useLayoutEffect(() => {\n    window.addEventListener(\"resize\", resizeCheck);\n    resizeCheck();\n    return () => {\n      window.removeEventListener(\"resize\", resizeCheck);\n    };\n  }, []);\n\n  return [height, width];\n};\n\nexport default useWindowSize;\n","import React from \"react\";\n\ninterface ImageProps {\n  src: string;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\nconst Image: React.FC<ImageProps> = ({ src, width, height }) => {\n  return <img src={src} width={width} height={height} alt=\"hmm.\" />;\n};\n\nexport default Image;\n","import React, { useMemo } from \"react\";\nimport generateList from \"../../lib/generate-list/generate-list\";\nimport getUnsplashImage from \"../../lib/get-unsplash-image/get-unsplash-image\";\nimport useWindowSize from \"../../hook/use-window-size\";\nimport Image from \"../Image\";\n\nimport style from \"./FullscreenGrid.module.css\";\n\ninterface FullscreenGridProps {\n  onClick: () => void;\n  solving: boolean;\n  words: string[];\n}\n\nconst FullscreenGrid: React.FC<FullscreenGridProps> = ({\n  onClick,\n  solving = false,\n  words\n}) => {\n  const [height, width] = useWindowSize();\n  const sizeX = Math.ceil(width / 6);\n  const sizeY = Math.ceil(height / 6);\n\n  const images = useMemo(() => {\n    const keywordList = generateList(words, 6 * 6);\n    return keywordList.map(keyword =>\n      getUnsplashImage({\n        height: sizeY,\n        keyword: keyword,\n        width: sizeX\n      })\n    );\n  }, [sizeX, sizeY, words]);\n\n  return (\n    <div\n      className={`${style.root} ${solving ? style.solving : style.general}`}\n      onClick={onClick}\n      style={{\n        boxSizing: \"border-box\",\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(6, 1fr)\",\n        gridTemplateRows: \"repeat(6, 1fr)\",\n        overflow: \"hidden\",\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\"\n      }}\n    >\n      {images.map((image, index) => (\n        <Image\n          key={image.url}\n          x={index % 6}\n          y={Math.floor(index / 6)}\n          src={image.url}\n          width={image.width}\n          height={image.height}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default FullscreenGrid;\n","import React, { useRef, FormEvent, useLayoutEffect } from \"react\";\n\nimport style from \"./Solver.module.css\";\n\ninterface SolverProps {\n  words: [string, string];\n  hide: () => void;\n  solve: () => void;\n  solved: boolean;\n  wrong: () => void;\n}\n\nconst Solver: React.FC<SolverProps> = ({\n  hide,\n  solve,\n  solved = false,\n  words: [first, second],\n  wrong\n}) => {\n  const solutionElement = useRef<HTMLInputElement>(null);\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    verifySolution();\n  };\n  const verifySolution = () => {\n    const split =\n      solutionElement.current && solutionElement.current.value.split(/\\s+/);\n    const correct = split && split[0] === first && split[1] === second;\n    if (correct) {\n      solve();\n    } else {\n      wrong();\n    }\n  };\n  const focusSolutionElement = () => {\n    if (solutionElement.current) {\n      solutionElement.current.focus();\n    }\n  };\n  useLayoutEffect(focusSolutionElement);\n  return (\n    <div className={style.root} onClick={focusSolutionElement}>\n      <form onSubmit={onSubmit}>\n        <div className={style.form}>\n          <h2>Enter your solution</h2>\n          <p>So you think you know what word combination we look for?</p>\n          <div className={`${style.input} ${solved ? style.solved : \"\"}`}>\n            <input ref={solutionElement} type=\"text\" />\n            <button type=\"submit\">{solved ? \"Solved!\" : \"Solve!\"}</button>\n          </div>\n          <button type=\"button\" onClick={() => hide()}>\n            Look at pictures again\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Solver;\n","const listOfPairs: [string, string][] = [\n  [\"birthday\", \"cake\"],\n  [\"cheese\", \"cake\"],\n  [\"coal\", \"mine\"],\n  [\"coffee\", \"shop\"],\n  [\"doggy\", \"bag\"],\n  [\"elementary\", \"school\"],\n  [\"grass\", \"roots\"],\n  [\"iron\", \"man\"],\n  [\"lion\", \"king\"],\n  [\"money\", \"bag\"],\n  [\"monkey\", \"wrench\"],\n  [\"mountain\", \"bike\"],\n  [\"photo\", \"shoot\"],\n  [\"shopping\", \"cart\"],\n  [\"space\", \"ship\"],\n  [\"taxi\", \"driver\"],\n  [\"traffic\", \"light\"],\n  [\"travel\", \"guide\"],\n  [\"tv\", \"channel\"],\n  [\"water\", \"cooler\"]\n];\n\nexport default listOfPairs;\n","import listOfPairs from \"../../service/pairs\";\n\nexport default function pairGenerator(): [string, string] {\n  return listOfPairs[Math.floor(Math.random() * listOfPairs.length)];\n}\n","import React from \"react\";\n\nimport style from \"./Dialog.module.css\";\n\ninterface DialogProps {\n  title: string;\n  party: Boolean;\n  message: string;\n  close: () => void;\n}\n\nconst Dialog: React.FC<DialogProps> = ({ close, message, party, title }) => {\n  return (\n    <div\n      className={`${style.root} ${party ? style.party : \"\"}`}\n      onClick={close}\n    >\n      <div className={style.content}>\n        <h2>{title}</h2>\n        <div>{message}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialog;\n","import React, { useState, useCallback } from \"react\";\nimport FullscreenGrid from \"../FullscreenGrid\";\nimport Solver from \"../Solver\";\nimport pairGenerator from \"../../lib/pair-generator/pair-generator\";\n\nimport style from \"./App.module.css\";\nimport Dialog from \"../Dialog\";\n\nconst App: React.FC = () => {\n  const [showSolve, setShowSolve] = useState(false);\n  const [showDialogWindow, setShowDialogWindow] = useState(false);\n  const [solved, setSolved] = useState(false);\n  const [pair, setPair] = useState(() => pairGenerator());\n  const showSolver = useCallback(() => setShowSolve(true), []);\n  const hideSolver = useCallback(() => setShowSolve(false), []);\n  const showDialog = useCallback(() => {\n    setShowDialogWindow(true);\n  }, []);\n  const hideDialog = useCallback(() => {\n    setShowDialogWindow(false);\n  }, []);\n  const reset = () => {\n    setShowDialogWindow(false);\n    setShowSolve(false);\n    setSolved(false);\n    setPair(pairGenerator());\n  };\n\n  return (\n    <div\n      className={`${style.app} ${showSolve ? style.solving : style.general} ${\n        solved ? style.solved : \"\"\n      }`}\n    >\n      <FullscreenGrid onClick={showSolver} solving={showSolve} words={pair} />\n      {showSolve && (\n        <Solver\n          hide={hideSolver}\n          solve={() => {\n            showDialog();\n            setSolved(true);\n          }}\n          solved={solved}\n          wrong={showDialog}\n          words={pair}\n        />\n      )}\n      <button className={style.restart} type=\"button\" onClick={reset}>\n        Restart\n      </button>\n      {showDialogWindow && (\n        <Dialog\n          close={hideDialog}\n          title={solved ? \"Yesss!\" : \"Nope...\"}\n          party={solved}\n          message={\n            solved\n              ? \"You solved this puzzle!\"\n              : \"Sorry, this is not the correct thing\"\n          }\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./component/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}