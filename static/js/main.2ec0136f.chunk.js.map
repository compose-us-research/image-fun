{"version":3,"sources":["lib/generate-list.ts","service/get-unsplash-image.ts","hook/use-window-size.ts","component/Image.tsx","component/FullscreenGrid.tsx","component/Solver.tsx","lib/pair-generator.ts","App.tsx","serviceWorker.ts","index.tsx","component/Solver.module.css"],"names":["generateList","words","num","maxAmountPerWord","Math","floor","length","freeSpace","Array","fill","map","i","idx","keywords","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","word","value","_loop","selectedIndex","random","filter","index","err","return","forEach","remainingIndex","getUnsplashImage","_ref","height","keyword","width","url","concat","uuid","v4","useWindowSize","_useState","useState","_useState2","Object","slicedToArray","setHeight","_useState3","_useState4","setWidth","useLayoutEffect","resizeCheck","window","innerHeight","innerWidth","addEventListener","removeEventListener","Image","src","react_default","a","createElement","alt","FullscreenGrid","onClick","_useWindowSize","_useWindowSize2","sizeX","ceil","sizeY","images","useMemo","className","style","boxSizing","display","gridTemplateColumns","gridTemplateRows","overflow","position","image","component_Image","key","x","y","Solver","hide","solve","_ref$solved","solved","_ref$words","first","second","wrong","solutionElement","useRef","verifySolution","split","current","focusSolutionElement","focus","root","onSubmit","event","preventDefault","form","input","ref","type","listOfPairs","pairGenerator","App","showSolve","setShowSolve","setSolved","_useState5","_useState6","pair","setPair","showSolver","useCallback","hideSolver","component_FullscreenGrid","component_Solver","alert","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.2ec0136f.chunk.js","sourcesContent":["const generateList = (words: string[], num: number) => {\n  const maxAmountPerWord = Math.floor(num / words.length);\n  let freeSpace = new Array(num).fill(1).map((i, idx) => i * idx);\n  let keywords = new Array(num);\n  for (let word of words) {\n    for (let i = 0; i < maxAmountPerWord; i++) {\n      const selectedIndex =\n        freeSpace[Math.floor(Math.random() * freeSpace.length)];\n      keywords[selectedIndex] = word;\n      freeSpace = freeSpace.filter(index => index !== selectedIndex);\n    }\n  }\n  // assert freeSpace.length < words.length\n  freeSpace.forEach((remainingIndex, index) => {\n    keywords[remainingIndex] = words[index];\n  });\n  return keywords;\n};\n\nexport default generateList;\n","import uuid from \"uuid\";\n\nconst getUnsplashImage = ({ height, keyword, width }: { height: number; keyword: string; width: number }) => {\n  return {\n    height,\n    keyword,\n    url: `https://source.unsplash.com/random/${width}x${height}?${keyword},${uuid.v4()}`,\n    width\n  };\n};\n\nexport default getUnsplashImage;\n","import { useState, useLayoutEffect } from \"react\";\n\nconst useWindowSize = () => {\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n  useLayoutEffect(() => {\n    const resizeCheck = () => {\n      setHeight(window.innerHeight);\n      setWidth(window.innerWidth);\n    };\n    window.addEventListener(\"resize\", resizeCheck);\n    resizeCheck();\n    return () => {\n      window.removeEventListener(\"resize\", resizeCheck);\n    };\n  }, []);\n\n  return [height, width];\n};\n\nexport default useWindowSize;\n","import React from \"react\";\n\ninterface ImageProps {\n  src: string;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\nconst Image: React.FC<ImageProps> = ({ src, width, height }) => {\n  return <img src={src} width={width} height={height} alt=\"hmm.\" />;\n};\n\nexport default Image;\n","import React, { useMemo } from \"react\";\nimport generateList from \"../lib/generate-list\";\nimport getUnsplashImage from \"../service/get-unsplash-image\";\nimport useWindowSize from \"../hook/use-window-size\";\nimport Image from \"./Image\";\n\ninterface FullscreenGridProps {\n  onClick: () => void;\n  words: string[];\n}\n\nconst FullscreenGrid: React.FC<FullscreenGridProps> = ({ onClick, words }) => {\n  const [height, width] = useWindowSize();\n  const sizeX = Math.ceil(width / 6);\n  const sizeY = Math.ceil(height / 6);\n\n  const images = useMemo(() => {\n    const keywordList = generateList(words, 6 * 6);\n    return keywordList.map(keyword =>\n      getUnsplashImage({\n        height: sizeY,\n        keyword: keyword,\n        width: sizeX\n      })\n    );\n  }, [sizeX, sizeY, words]);\n\n  return (\n    <div\n      className=\"grid\"\n      onClick={onClick}\n      style={{\n        boxSizing: \"border-box\",\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(6, 1fr)\",\n        gridTemplateRows: \"repeat(6, 1fr)\",\n        overflow: \"hidden\",\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\"\n      }}\n    >\n      {images.map((image, index) => (\n        <Image\n          key={image.url}\n          x={index % 6}\n          y={Math.floor(index / 6)}\n          src={image.url}\n          width={image.width}\n          height={image.height}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default FullscreenGrid;\n","import React, { useRef, FormEvent, useLayoutEffect } from \"react\";\n\nimport style from \"./Solver.module.css\";\n\ninterface SolverProps {\n  words: [string, string];\n  hide: () => void;\n  solve: () => void;\n  solved: boolean;\n  wrong: () => void;\n}\n\nconst Solver: React.FC<SolverProps> = ({\n  hide,\n  solve,\n  solved = false,\n  words: [first, second],\n  wrong\n}) => {\n  const solutionElement = useRef<HTMLInputElement>(null);\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    verifySolution();\n  };\n  const verifySolution = () => {\n    const split =\n      solutionElement.current && solutionElement.current.value.split(/\\s+/);\n    const correct = split && split[0] === first && split[1] === second;\n    if (correct) {\n      solve();\n    } else {\n      wrong();\n    }\n  };\n  const focusSolutionElement = () => {\n    if (solutionElement.current) {\n      solutionElement.current.focus();\n    }\n  };\n  useLayoutEffect(() => focusSolutionElement());\n  return (\n    <div className={style.root} onClick={focusSolutionElement}>\n      <form onSubmit={onSubmit}>\n        <div className={style.form}>\n          <h2>Enter your solution</h2>\n          <p>So you think you know what word combination we look for?</p>\n          <div className={`${style.input} ${solved ? style.solved : \"\"}`}>\n            <input ref={solutionElement} type=\"text\" />\n            <button type=\"submit\">Solve!</button>\n          </div>\n          <button type=\"button\" onClick={() => hide()}>\n            Look at pictures again\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Solver;\n","const listOfPairs: [string, string][] = [\n  [\"grass\", \"roots\"],\n  [\"doggy\", \"bag\"],\n  [\"money\", \"bag\"],\n  [\"tv\", \"channel\"]\n];\n\nexport default function pairGenerator(): [string, string] {\n  return listOfPairs[Math.floor(Math.random() * listOfPairs.length)];\n}\n","import React, { useState, useCallback } from \"react\";\nimport FullscreenGrid from \"./component/FullscreenGrid\";\nimport Solver from \"./component/Solver\";\nimport pairGenerator from \"./lib/pair-generator\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [showSolve, setShowSolve] = useState(false);\n  const [solved, setSolved] = useState(false);\n  const [pair, setPair] = useState(() => pairGenerator());\n  const showSolver = useCallback(() => setShowSolve(true), []);\n  const hideSolver = useCallback(() => setShowSolve(false), []);\n  const reset = () => {\n    setSolved(false);\n    setPair(pairGenerator());\n  };\n\n  return (\n    <div className={`App ${showSolve ? \"solving\" : \"general\"}`}>\n      <FullscreenGrid onClick={showSolver} words={pair} />\n      <button className=\"restart\" type=\"button\" onClick={reset}>\n        Restart\n      </button>\n      {showSolve && (\n        <Solver\n          hide={hideSolver}\n          solve={() => {\n            window.alert(\"solved!\");\n            setSolved(true);\n          }}\n          solved={solved}\n          wrong={() => window.alert(\"wrong!\")}\n          words={pair}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Solver_root__3xKVc\",\"form\":\"Solver_form__1PAlK\",\"input\":\"Solver_input__x0Wi7\",\"solved\":\"Solver_solved__10Q9h\"};"],"sourceRoot":""}